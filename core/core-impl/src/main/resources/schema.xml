<?xml version="1.0" ?><!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!-- This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="entrystore" version="1.1">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
    Applications should change this to reflect the nature of the search collection.
    version="1.1" is Solr's version number for the schema syntax and semantics.  It should
    not normally be changed by applications.
    1.0: multiValued attribute did not exist, all fields are multiValued by nature
    1.1: multiValued attribute introduced, false by default -->

    <types>
        <!-- field type definitions. The "name" attribute is
           just a label to be used by field definitions.  The "class"
           attribute and any other attributes determine the real
           behavior of the fieldtype.
             Class names starting with "solr" refer to java classes in the
           org.apache.solr.analysis package.
        -->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim.
           - StrField and TextField support an optional compressThreshold which
           limits compression (if enabled in the derived fields) to values which
           exceed a certain size (in characters).
        -->
        <fieldtype name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

        <!-- boolean type: "true" or "false" -->
        <fieldtype name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

        <!-- The optional sortMissingLast and sortMissingFirst attributes are
             currently supported on types that are sorted internally as strings.
           - If sortMissingLast="true", then a sort on this field will cause documents
             without the field to come after documents with the field,
             regardless of the requested sort order (asc or desc).
           - If sortMissingFirst="true", then a sort on this field will cause documents
             without the field to come before documents with the field,
             regardless of the requested sort order.
           - If sortMissingLast="false" and sortMissingFirst="false" (the default),
             then default lucene sorting will be used which places docs without the
             field first in an ascending sort and last in a descending sort.
        -->


        <!-- numeric field types that store and index the text
value verbatim (and hence don't support range queries, since the
lexicographic ordering isn't equal to the numeric ordering) -->
        <fieldtype name="integer" class="solr.TrieIntField" omitNorms="true"/>
        <fieldtype name="long" class="solr.TrieLongField" omitNorms="true"/>
        <fieldtype name="float" class="solr.TrieFloatField" omitNorms="true"/>
        <fieldtype name="double" class="solr.TrieDoubleField" omitNorms="true"/>


        <!-- Numeric field types that manipulate the value into
  a string value that isn't human-readable in its internal form,
  but with a lexicographic ordering the same as the numeric ordering,
  so that range queries work correctly. -->
        <fieldtype name="sint" class="solr.TrieIntField" sortMissingLast="true" omitNorms="true"/>
        <fieldtype name="slong" class="solr.TrieLongField" sortMissingLast="true" omitNorms="true"/>
        <fieldtype name="sfloat" class="solr.TrieFloatField" sortMissingLast="true" omitNorms="true"/>
        <fieldtype name="sdouble" class="solr.TrieDoubleField" sortMissingLast="true" omitNorms="true"/>


        <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
           is a more restricted form of the canonical representation of dateTime
           http://www.w3.org/TR/xmlschema-2/#dateTime
           The trailing "Z" designates UTC time and is mandatory.
           Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
           All other components are mandatory.

           Expressions can also be used to denote calculations that should be
           performed relative to "NOW" to determine the value, ie...

                 NOW/HOUR
                    ... Round to the start of the current hour
                 NOW-1DAY
                    ... Exactly 1 day prior to now
                 NOW/DAY+6MONTHS+3DAYS
                    ... 6 months and 3 days in the future from the start of
                        the current day

           Consult the DateField javadocs for more information.
        -->
        <fieldtype name="date" class="solr.TrieDateField" sortMissingLast="true" omitNorms="true"/>

        <!-- solr.TextField allows the specification of custom text analyzers
            specified as a tokenizer and a list of token filters. Different
            analyzers may be specified for indexing and querying.

            The optional positionIncrementGap puts space between multiple fields of
            this type on the same document, with the purpose of preventing false phrase
            matching across fields.

            For more info on customizing your analyzer chain, please see
            http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
        -->

        <!-- One can also specify an existing Analyzer class that has a
             default constructor via the class attribute on the analyzer element
        <fieldtype name="text_greek" class="solr.TextField">
          <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
        </fieldType>
        -->

        <!-- A text field that only splits on whitespace for exact matching of words -->
        <fieldtype name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldtype>

        <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
        so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
        Synonyms and stopwords are customized by external files, and stemming is enabled.
        Duplicate tokens at the same position (which may result from Stemmed Synonyms or
        WordDelim parts) are removed.
        -->
        <fieldtype name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- NGramTokenizer has to be used if substring matching should work -->
                <!-- <tokenizer class="solr.NGramTokenizerFactory" minGramSize="3" maxGramSize="15" />-->
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldtype>

        <fieldType name="text_ngram" class="solr.TextField">
            <analyzer type="index">
                <tokenizer class="solr.NGramTokenizerFactory" minGramSize="3" maxGramSize="25"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.EdgeNGramFilterFactory" minGramSize="3" maxGramSize="25" />
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- A text field intended for sorting -->
        <fieldType name="text_sort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
            <analyzer>
                <!-- KeywordTokenizer preserves the entire input string as a single token -->
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <!-- Sorting should be case insensitive -->
                <filter class="solr.LowerCaseFilterFactory" />
                <!-- TrimFilter removes any leading or trailing whitespace -->
                <filter class="solr.TrimFilterFactory" />
            </analyzer>
        </fieldType>

        <fieldType name="text_sort_en" class="solr.ICUCollationField" locale="en" strength="primary" numeric="true" />
        <fieldType name="text_sort_de" class="solr.ICUCollationField" locale="de" strength="primary" numeric="true" />
        <fieldType name="text_sort_sv" class="solr.ICUCollationField" locale="sv" strength="primary" numeric="true" />

    </types>

    <fields>
        <!-- Valid attributes for fields:
          name: mandatory - the name for the field
          type: mandatory - the name of a previously defined type from the <types> section
          indexed: true if this field should be indexed (searchable or sortable)
          stored: true if this field should be retrievable
          compressed: [false] if this field should be stored using gzip compression
            (this will only apply if the field type is compressable; among
            the standard field types, only TextField and StrField are)
          multiValued: true if this field may contain multiple values per document
          omitNorms: (expert) set to true to omit the norms associated with
            this field (this disables length normalization and index-time
            boosting for the field, and saves some memory).  Only full-text
            fields or fields that need an index-time boost need norms.
        -->

        <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>

        <!-- id is needed for duplicate detection, configured in solrconfig.xml -->
        <field name="id" type="string" indexed="true"/>

        <field name="indexedAt" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
        <field name="uri" type="string" indexed="true" stored="true"/>
        <field name="resource" type="string" indexed="true" stored="true"/>
        <field name="context" type="string" indexed="true"/>
        <field name="rdfType" type="string" indexed="true" stored="true" multiValued="true"/>
        <field name="creator" type="string" indexed="true"/>
        <field name="contributors" type="string" indexed="true" multiValued="true"/>
        <field name="lists" type="string" indexed="true" multiValued="true"/>
        <field name="public" type="boolean" indexed="true"/>
        <field name="created" type="date" indexed="true"/>
        <field name="modified" type="date" indexed="true"/>
        <field name="graphType" type="string" indexed="true"/>
        <field name="entryType" type="string" indexed="true"/>
        <field name="resourceType" type="string" indexed="true"/>
        <field name="username" type="string" indexed="true"/>

        <dynamicField name="metadata.predicate.uri.*" type="string" indexed="true" multiValued="true"/>
        <dynamicField name="metadata.predicate.literal_s.*" type="string" indexed="true" multiValued="true"/>
        <dynamicField name="metadata.predicate.literal_t.*" type="text" indexed="true" multiValued="true"/>
        <dynamicField name="metadata.predicate.literal.*" type="text_ngram" indexed="true" multiValued="true"/>
        <dynamicField name="metadata.predicate.date.*" type="date" indexed="true" multiValued="false"/>
        <dynamicField name="metadata.predicate.integer.*" type="slong" indexed="true" multiValued="false"/>
        <field name="metadata.object.uri" type="string" indexed="true" multiValued="true"/>
        <field name="metadata.object.literal" type="text" indexed="true" multiValued="true"/>

        <dynamicField name="related.metadata.predicate.uri.*" type="string" indexed="true" multiValued="true"/>
        <dynamicField name="related.metadata.predicate.literal_s.*" type="string" indexed="true" multiValued="true"/>
        <dynamicField name="related.metadata.predicate.literal_t.*" type="text" indexed="true" multiValued="true"/>
        <dynamicField name="related.metadata.predicate.literal.*" type="text_ngram" indexed="true" multiValued="true"/>
        <dynamicField name="related.metadata.predicate.date.*" type="date" indexed="true" multiValued="false"/>
        <dynamicField name="related.metadata.predicate.integer.*" type="slong" indexed="true" multiValued="false"/>

        <field name="acl.admin" type="string" indexed="true" multiValued="true"/>
        <field name="acl.metadata.r" type="string" indexed="true" multiValued="true"/>
        <field name="acl.metadata.rw" type="string" indexed="true" multiValued="true"/>
        <field name="acl.resource.r" type="string" indexed="true" multiValued="true"/>
        <field name="acl.resource.rw" type="string" indexed="true" multiValued="true"/>

        <field name="title" type="text_ngram" indexed="true" multiValued="true"/>
        <field name="description" type="text_ngram" indexed="true" multiValued="true"/>
        <field name="lang" type="string" indexed="true" multiValued="true"/>

        <field name="tag.literal" type="text_ngram" indexed="true" multiValued="true"/>
        <field name="tag.uri" type="string" indexed="true" multiValued="true"/>

        <field name="email" type="string" indexed="true" multiValued="true"/>

        <field name="status" type="string" indexed="true" multiValued="false"/>

        <!-- title needs to be single-valued in order be sortable, desc and tag can be text and multi value -->
        <dynamicField name="title.*" type="text_ngram" indexed="true" multiValued="false"/>
        <field name="title_sort.en" type="text_sort_en" indexed="true" multiValued="false"/>
        <field name="title_sort.de" type="text_sort_de" indexed="true" multiValued="false"/>
        <field name="title_sort.sv" type="text_sort_sv" indexed="true" multiValued="false"/>
        <dynamicField name="title_sort.*" type="text_sort" indexed="true" multiValued="false"/>
        <dynamicField name="description.*" type="text" indexed="true" multiValued="true"/>
        <dynamicField name="tag.literal.*" type="text_ngram" indexed="true" multiValued="true"/>

        <!-- the fulltext field is filled with a string extracted using apache tika -->
        <field name="fulltext" type="text" indexed="true" stored="false"/>

        <!-- catchall field, containing all other searchable text fields
        	 (implemented via copyField further on in this schema  -->
        <field name="all" type="text" indexed="true" multiValued="true"/>

        <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
will be used if the name matches any of the patterns.
RESTRICTION: the glob-like pattern in the name attribute must have
a "*" only at the start or the end.
EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
Longer patterns will be matched first.  if equal size patterns
both match, the first appearing in the schema will be used.  -->
        <dynamicField name="*_i" type="sint" indexed="true" stored="true"/>
        <dynamicField name="*_s" type="string" indexed="true" stored="true"/>
        <dynamicField name="*_l" type="slong" indexed="true" stored="true"/>
        <dynamicField name="*_t" type="text" indexed="true" stored="true"/>
        <dynamicField name="*_b" type="boolean" indexed="true" stored="true"/>
        <dynamicField name="*_f" type="sfloat" indexed="true" stored="true"/>
        <dynamicField name="*_d" type="sdouble" indexed="true" stored="true"/>
        <dynamicField name="*_dt" type="date" indexed="true" stored="true"/>
    </fields>

    <!-- field to use to determine and enforce document uniqueness. -->
    <uniqueKey>uri</uniqueKey>

    <!-- copyField commands copy one field to another at the time a document
is added to the index.  It's used either to index the same field differently,
or to add multiple fields to the same field for easier/faster searching.  -->
    <copyField source="title" dest="all"/>
    <copyField source="title.*" dest="title_sort.*"/>
    <copyField source="description" dest="all"/>
    <copyField source="tag.literal" dest="all"/>

    <copyField source="metadata.predicate.literal_s.*" dest="metadata.predicate.literal.*"/>
    <copyField source="metadata.predicate.literal_s.*" dest="metadata.predicate.literal_t.*"/>
    <copyField source="related.metadata.predicate.literal_s.*" dest="related.metadata.predicate.literal.*"/>
    <copyField source="related.metadata.predicate.literal_s.*" dest="related.metadata.predicate.literal_t.*"/>

    <!-- Similarity is the scoring routine for each document vs. a query.
A custom similarity may be specified here, but the default is fine
for most applications.  -->
    <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->

</schema>
